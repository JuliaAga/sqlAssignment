1) представим, что у нас есть данные, которые мы очень часто читаем по сравнению с другими(например словарь стран). Как можно это оптимизировать?
Можно оптимизировать кэшированием, в зависимости от ситуации - на уровне балансировщика, на уровне приложения. 
Это позволит выполнять меньше запросов на чтение, обрабатывая заранее сохраненные данные. 
Минусы - возможно обработка неактуальных данных

2) Что можно сделать, если таблица вакансий стала слишком большой? Какие есть решения на уровне текущей базы данных? Можно ли ее чем то заменить?
Партиционирование (разные варианты разделения)
Плюсы - может не требовать поддержки, стабильное разделение по количеству записей, облегченный поиск.
Минусы - в зависимости от выбранного способа разделения любой плюс может перевернуться в минус.
Архивирование устаревших записей, реплики в режиме на чтение. Для поиска нормализовать данные, настроить индексы или воспользоваться чем-то вроде elasticSearch

3) Какие вы видите узкие места, возможно неправильно выбранные технологии в текущей схеме(можно рассмотреть как “нашу” схему, так и схему настоящего hh.ru)
На "нашей" схеме:
Если считать front именно сайт сервиса по поиску вакансий/сотрудников, то лучше вынести partner api на отдельный балансировщик, 
т.к. вероятно там могут быть более тяжелые/интенсивные запросы, либо запросы требующие отдельных настроек 
(напр. параметры кеширования, другая аутентификация, может доп. уровень безопасности). + partner api я понимаю как уже уровень бэк-сервиса (уровень app), поэтому дальше он уже идет в балансировщик к бд.




